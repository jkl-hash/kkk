#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <sys/mman.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <linux/input.h>

int LCD_WIDTH = 800;
int LCD_HEIGHT = 480;
unsigned int *pmap = MAP_FAILED;

#define BUTTON_HEIGHT 50
#define BUTTON_WIDTH 100

int open_lcd(const char *device) {
    int fd = open(device, O_RDWR);
    if (fd == -1) {
        perror("open lcd error\n");
        return -1;
    }
    return fd;
}

unsigned int *map_lcd(int fd) {
    unsigned int *map = mmap(NULL, LCD_WIDTH * LCD_HEIGHT * 4, PROT_WRITE, MAP_SHARED, fd, 0);
    if (map == MAP_FAILED) {
        perror("mmap error\n");
        return NULL;
    }
    return map;
}

void draw_point(int x, int y, unsigned int color) {
    if (x >= 0 && x < LCD_WIDTH && y >= 0 && y < LCD_HEIGHT) {
        *(pmap + y * LCD_WIDTH + x) = color;
    }
}

void center_to_outward_effect(const char *file_path, int fd_lcd) {
    int fd_pic = open(file_path, O_RDONLY);
    if (fd_pic == -1) {
        perror("open picture file error\n");
        return;
    }

    short MS = -1;
    int offset, width, height, depth;
    read(fd_pic, &MS, 2);
    if (MS != 0x4D42) {
        printf("this pic is not bmp!\n");
        close(fd_pic);
        return;
    }

    lseek(fd_pic, 0x0A, SEEK_SET);
    read(fd_pic, &offset, 4);
    lseek(fd_pic, 0x12, SEEK_SET);
    read(fd_pic, &width, 4);
    lseek(fd_pic, 0x16, SEEK_SET);
    read(fd_pic, &height, 4);
    lseek(fd_pic, 0x1C, SEEK_SET);
    read(fd_pic, &depth, 2);

    int bytes_per_pixel = depth / 8;
    int line_padding = (4 - (width * bytes_per_pixel) % 4) % 4;
    int buffer_size = width * abs(height) * bytes_per_pixel + line_padding * abs(height);
    unsigned char* buffer = malloc(buffer_size);
    lseek(fd_pic, offset, SEEK_SET);
    read(fd_pic, buffer, buffer_size);

    int centerX = width / 2;
    int centerY = abs(height) / 2;

    for (int radius = 0; radius <= hypot(centerX, centerY); radius+=20) {
        for (int y = -radius; y <= radius; y++) {
            for (int x = -radius; x <= radius; x++) {
                if (x * x + y * y <= radius * radius) {
                    int imageX = centerX + x;
                    int imageY = centerY + y;
                    if (imageX >= 0 && imageX < width && imageY >= 0 && imageY < abs(height)) {
                        unsigned int color = 0;
                        unsigned char* pixel = buffer + (abs(height) - 1 - imageY) * (width * bytes_per_pixel + line_padding) + imageX * bytes_per_pixel;
                        if (depth == 24) {
                            color = 0xFF000000 | pixel[2] << 16 | pixel[1] << 8 | pixel[0];
                        } else if (depth == 32) {
                            color = pixel[3] << 24 | pixel[2] << 16 | pixel[1] << 8 | pixel[0];
                        }
                        int scaled_x = imageX * LCD_WIDTH / width;
                        int scaled_y = imageY * LCD_HEIGHT / abs(height);
                        draw_point(scaled_x, scaled_y, color);
                    }
                }
            }
        }
        usleep(0.01); // Delay to make the effect visible
    }

    free(buffer);
    close(fd_pic);
}

int main() {
    int fd_lcd = open_lcd("/dev/fb0");
    if (fd_lcd == -1) {
        return -1;
    }
    pmap = map_lcd(fd_lcd);
    if (pmap == NULL) {
        close(fd_lcd);
        return -1;
    }

    const char *images[] = {"./1.bmp", "./2.bmp", "./3.bmp","./4.bmp","./5.bmp","./6.bmp"};
    int image_count = sizeof(images) / sizeof(images[0]);
    int current_image = 0;

    int touch_fd = open("/dev/input/event0", O_RDONLY);
    if (touch_fd == -1) {
        perror("Failed to open touch event file\n");
        return -1;
    }

    struct input_event ev;
    int touch_x = 0, touch_y = 0;
    center_to_outward_effect(images[current_image], fd_lcd); // Initially display first image with effect

    while (1) {
        while (read(touch_fd, &ev, sizeof(struct input_event)) > 0) {
            if (ev.type == EV_ABS) {
                if (ev.code == ABS_X) touch_x = ev.value;
                else if (ev.code == ABS_Y) touch_y = ev.value;
            } else if (ev.type == EV_SYN && touch_x != 0 && touch_y != 0) {
                if (touch_x < BUTTON_WIDTH && touch_y > (LCD_HEIGHT - BUTTON_HEIGHT)) {
                    if (current_image > 0) current_image--;
                    else current_image = image_count - 1;
                } else if (touch_x > (LCD_WIDTH - BUTTON_WIDTH) && touch_y > (LCD_HEIGHT - BUTTON_HEIGHT)) {
                    current_image = (current_image + 1) % image_count;
                }
                center_to_outward_effect(images[current_image], fd_lcd);
                touch_x = 0; touch_y = 0; // Reset touch coordinates after handling
            }
        }
    }

    close(touch_fd);
    munmap(pmap, LCD_WIDTH * LCD_HEIGHT * 4);
    close(fd_lcd);

    return 0;
}
